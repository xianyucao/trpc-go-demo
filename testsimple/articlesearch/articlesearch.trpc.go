// Code generated by trpc-go/trpc-cmdline v1.0.7. DO NOT EDIT.
// source: articlesearch.proto

package articlesearch

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// ArticleServiceService defines service.
type ArticleServiceService interface {
	// SearchArticles 搜索文章的RPC方法
	SearchArticles(ctx context.Context, req *SearchRequest) (*SearchResponse, error)
}

func ArticleServiceService_SearchArticles_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &SearchRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ArticleServiceService).SearchArticles(ctx, reqbody.(*SearchRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// ArticleServiceServer_ServiceDesc descriptor for server.RegisterService.
var ArticleServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "articlesearch.ArticleService",
	HandlerType: ((*ArticleServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/articlesearch.ArticleService/SearchArticles",
			Func: ArticleServiceService_SearchArticles_Handler,
		},
	},
}

// RegisterArticleServiceService registers service.
func RegisterArticleServiceService(s server.Service, svr ArticleServiceService) {
	if err := s.Register(&ArticleServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("ArticleService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedArticleService struct{}

// SearchArticles 搜索文章的RPC方法
func (s *UnimplementedArticleService) SearchArticles(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, errors.New("rpc SearchArticles of service ArticleService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// ArticleServiceClientProxy defines service client proxy
type ArticleServiceClientProxy interface {
	// SearchArticles 搜索文章的RPC方法
	SearchArticles(ctx context.Context, req *SearchRequest, opts ...client.Option) (rsp *SearchResponse, err error)
}

type ArticleServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewArticleServiceClientProxy = func(opts ...client.Option) ArticleServiceClientProxy {
	return &ArticleServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ArticleServiceClientProxyImpl) SearchArticles(ctx context.Context, req *SearchRequest, opts ...client.Option) (*SearchResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/articlesearch.ArticleService/SearchArticles")
	msg.WithCalleeServiceName(ArticleServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("ArticleService")
	msg.WithCalleeMethod("SearchArticles")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &SearchResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
