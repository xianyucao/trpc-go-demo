// Code generated by MockGen. DO NOT EDIT.
// Source: http_auth.trpc.go
//
// Generated by this command:
//
//	mockgen -source=http_auth.trpc.go -destination=mock/http_auth.trpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	httpauth "github.com/Andrew-M-C/trpc-go-demo/proto/httpauth"
	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, req *httpauth.LoginRequest) (*httpauth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*httpauth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, req)
}

// Synchronize mocks base method.
func (m *MockAuthService) Synchronize(ctx context.Context, req *httpauth.SynchronizeRequest) (*httpauth.SynchronizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synchronize", ctx, req)
	ret0, _ := ret[0].(*httpauth.SynchronizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Synchronize indicates an expected call of Synchronize.
func (mr *MockAuthServiceMockRecorder) Synchronize(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synchronize", reflect.TypeOf((*MockAuthService)(nil).Synchronize), ctx, req)
}

// MockAuthClientProxy is a mock of AuthClientProxy interface.
type MockAuthClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientProxyMockRecorder
}

// MockAuthClientProxyMockRecorder is the mock recorder for MockAuthClientProxy.
type MockAuthClientProxyMockRecorder struct {
	mock *MockAuthClientProxy
}

// NewMockAuthClientProxy creates a new mock instance.
func NewMockAuthClientProxy(ctrl *gomock.Controller) *MockAuthClientProxy {
	mock := &MockAuthClientProxy{ctrl: ctrl}
	mock.recorder = &MockAuthClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClientProxy) EXPECT() *MockAuthClientProxyMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthClientProxy) Login(ctx context.Context, req *httpauth.LoginRequest, opts ...client.Option) (*httpauth.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*httpauth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthClientProxyMockRecorder) Login(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthClientProxy)(nil).Login), varargs...)
}

// Synchronize mocks base method.
func (m *MockAuthClientProxy) Synchronize(ctx context.Context, req *httpauth.SynchronizeRequest, opts ...client.Option) (*httpauth.SynchronizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Synchronize", varargs...)
	ret0, _ := ret[0].(*httpauth.SynchronizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Synchronize indicates an expected call of Synchronize.
func (mr *MockAuthClientProxyMockRecorder) Synchronize(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synchronize", reflect.TypeOf((*MockAuthClientProxy)(nil).Synchronize), varargs...)
}
